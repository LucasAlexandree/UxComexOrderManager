
@model WebApp.ViewModels.OrderCreateViewModel
@{
    Layout = "_Layout";
}
<h2>New Order</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    </div>
}
<hr />
<form method="post" id="orderForm">
  <div class="row g-3">
    <div class="col-md-6">
      <label class="form-label">Customer</label>
      <select class="form-select" asp-for="CustomerId" required>
        <option value="">-- Select --</option>
        @foreach (var c in Model.Customers)
        {
            <option value="@c.Id">@c.Name (@c.Email)</option>
        }
      </select>
    </div>
  </div>

  <h5 class="mt-4">Items</h5>
  <table class="table" id="itemsTable">
    <thead>
      <tr><th style="width:45%">Product</th><th style="width:15%">Qty</th><th style="width:20%">Unit Price</th><th style="width:20%">Subtotal</th><th></th></tr>
    </thead>
    <tbody></tbody>
  </table>
  <button type="button" class="btn btn-outline-secondary" id="addItem">+ Add Item</button>

  <div class="mt-3 text-end">
    <h4>Total: <span id="total">0.00</span></h4>
  </div>

  <input type="hidden" name="ItemsJson" id="ItemsJson" />

  <div class="mt-3">
    <button class="btn btn-primary">Create Order</button>
    <a class="btn btn-secondary" href="/Orders">Back</a>
  </div>
</form>

@section Scripts {
<script>
const products = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Products));
function money(v){ return Number(v).toFixed(2); }

function rowTemplate(idx){
 const options = products.map(p => `<option data-price="${p.Price}" value="${p.Id}">${p.Name}</option>`).join("");

  return `<tr>
    <td><select class="form-select product">${options}</select></td>
    <td><input class="form-control qty" type="number" min="1" value="1"></td>
    <td class="price">0.00</td>
    <td class="subtotal">0.00</td>
    <td><button type="button" class="btn btn-sm btn-danger del">x</button></td>
  </tr>`;
}

function recalc(){
  let total = 0;
  $("#itemsTable tbody tr").each(function(){
    const priceCell = $(this).find(".price");
    const subCell = $(this).find(".subtotal");
    const sel = $(this).find("select.product option:selected");
    const price = Number(sel.data("price") || 0);
    const qty = Number($(this).find(".qty").val() || 0);
    priceCell.text(money(price));
    const sub = price * qty;
    subCell.text(money(sub));
    total += sub;
  });
  $("#total").text(money(total));
}

$("#addItem").on("click", function(){
  $("#itemsTable tbody").append(rowTemplate());
  recalc();
});

$("#itemsTable").on("change", "select.product, input.qty", recalc);
$("#itemsTable").on("click", "button.del", function(){
  $(this).closest("tr").remove();
  recalc();
});

$("#orderForm").on("submit", function(){
 
  const items = [];
  $("#itemsTable tbody tr").each(function(){
    const productId = Number($(this).find("select.product").val());
    const qty = Number($(this).find("input.qty").val());
    if(productId && qty > 0) items.push({ productId: productId, quantity: qty });
  });
  
  $("input[name^='Items']").remove();
  items.forEach((it, i) => {
    $("<input>").attr({ type:"hidden", name:`Items[${i}].ProductId`, value: it.productId }).appendTo("#orderForm");
    $("<input>").attr({ type:"hidden", name:`Items[${i}].Quantity`, value: it.quantity }).appendTo("#orderForm");
  });
});
</script>
}
